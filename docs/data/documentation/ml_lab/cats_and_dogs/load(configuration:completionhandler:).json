{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ml_lab\/cats_and_dogs\/load(configuration:completionhandler:)"]}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.lambdadigamma.mllab\/documentation\/ML_Lab","doc:\/\/com.lambdadigamma.mllab\/documentation\/ML_Lab\/Cats_and_Dogs"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.lambdadigamma.mllab\/documentation\/ML_Lab\/Cats_and_Dogs\/load(configuration:completionHandler:)"},"metadata":{"symbolKind":"method","role":"symbol","title":"load(configuration:completionHandler:)","externalID":"s:6ML_Lab13Cats_and_DogsC4load13configuration17completionHandlerySo20MLModelConfigurationC_ys6ResultOyACs5Error_pGctFZ","modules":[{"name":"ML_Lab"}],"roleHeading":"Type Method","platforms":[{"name":"iOS","beta":false,"deprecated":false,"introducedAt":"17.0","unavailable":false},{"unavailable":false,"name":"macOS","introducedAt":"14.0","beta":false,"deprecated":false},{"beta":false,"introducedAt":"17.0","name":"tvOS","unavailable":false,"deprecated":false}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"load","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"configuration"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"MLModelConfiguration","preciseIdentifier":"c:objc(cs)MLModelConfiguration"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"completionHandler"},{"text":": (Swift","kind":"text"},{"kind":"text","text":"."},{"text":"Result","kind":"typeIdentifier","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<"},{"text":"Cats_and_Dogs","preciseIdentifier":"s:6ML_Lab13Cats_and_DogsC","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")"}]},"abstract":[{"text":"Construct Cats_and_Dogs instance asynchronously with optional configuration.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["iOS"],"tokens":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"load","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"configuration"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"MLModelConfiguration","preciseIdentifier":"c:objc(cs)MLModelConfiguration"},{"text":" = MLModelConfiguration(), ","kind":"text"},{"text":"completionHandler","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"handler"},{"text":": ","kind":"text"},{"kind":"attribute","text":"@escaping"},{"text":" (Swift","kind":"text"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s6ResultO","text":"Result","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Cats_and_Dogs","identifier":"doc:\/\/com.lambdadigamma.mllab\/documentation\/ML_Lab\/Cats_and_Dogs","kind":"typeIdentifier","preciseIdentifier":"s:6ML_Lab13Cats_and_DogsC"},{"kind":"text","text":", "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")","kind":"text"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"configuration","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the desired model configuration"}]}]},{"name":"handler","content":[{"inlineContent":[{"text":"the completion handler to be called when the model loading completes successfully or unsuccessfully","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"Model loading may take time when the model content is not immediately available (e.g. encrypted model). Use this factory method especially when the caller is on the main thread.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://com.lambdadigamma.mllab/documentation/ML_Lab/Cats_and_Dogs":{"kind":"symbol","identifier":"doc:\/\/com.lambdadigamma.mllab\/documentation\/ML_Lab\/Cats_and_Dogs","title":"Cats_and_Dogs","role":"symbol","navigatorTitle":[{"text":"Cats_and_Dogs","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Cats_and_Dogs","kind":"identifier"}],"url":"\/documentation\/ml_lab\/cats_and_dogs","abstract":[{"type":"text","text":"Class for model loading and prediction"}]},"doc://com.lambdadigamma.mllab/documentation/ML_Lab/Cats_and_Dogs/load(configuration:completionHandler:)":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.lambdadigamma.mllab\/documentation\/ML_Lab\/Cats_and_Dogs\/load(configuration:completionHandler:)","role":"symbol","url":"\/documentation\/ml_lab\/cats_and_dogs\/load(configuration:completionhandler:)","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"load","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"configuration"},{"text":": ","kind":"text"},{"preciseIdentifier":"c:objc(cs)MLModelConfiguration","text":"MLModelConfiguration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"completionHandler"},{"text":": (Swift","kind":"text"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"text":"<","kind":"text"},{"text":"Cats_and_Dogs","kind":"typeIdentifier","preciseIdentifier":"s:6ML_Lab13Cats_and_DogsC"},{"kind":"text","text":", "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":">) -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Construct Cats_and_Dogs instance asynchronously with optional configuration."}],"title":"load(configuration:completionHandler:)"},"doc://com.lambdadigamma.mllab/documentation/ML_Lab":{"role":"collection","identifier":"doc:\/\/com.lambdadigamma.mllab\/documentation\/ML_Lab","abstract":[],"type":"topic","title":"ML_Lab","url":"\/documentation\/ml_lab","kind":"symbol"}}}