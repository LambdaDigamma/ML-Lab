{"variants":[{"paths":["\/tutorials\/ml-lab\/02-setup-implement-model"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"project","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/02-setup-implement-model"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents\/Setup-and-implement-the-classifier"]],"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents","modules":[{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents\/Add-the-model-to-your-project","projects":[{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project","sections":[{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project#Getting-a-model","kind":"task"},{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project#Adding-your-model-to-Xcode","kind":"task"},{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project#Exploring-the-model-in-Xcode","kind":"task"},{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project#Summary","kind":"task"}]}]},{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents\/Setup-and-implement-the-classifier","projects":[{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/02-setup-implement-model","sections":[{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/02-setup-implement-model#Setup-the-model","kind":"task"},{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/02-setup-implement-model#Implement-the-classification","kind":"task"},{"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/02-setup-implement-model#How-to-use-the-image-classifier","kind":"task"}]}]},{"projects":[],"reference":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents\/Add-the-next-chapter-title-here."}]},"sections":[{"title":"Setup and implement the model","kind":"hero","estimatedTimeInMinutes":30,"chapter":"Setup and implement the classifier","content":[]},{"tasks":[{"title":"Setup the model","stepsSection":[{"caption":[],"code":null,"runtimePreview":null,"media":"02-01-create-class.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new Swift file named "},{"type":"codeVoice","code":"ImageClassifier.swift"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This is going to be the main file where we implement the operation of classifing the image."}]}]},{"media":null,"caption":[],"runtimePreview":null,"code":"01-import-frameworks.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by importing "},{"type":"codeVoice","code":"UIKit"},{"text":", ","type":"text"},{"code":"Vision","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CoreML"},{"text":" at the top of the file. We need this frameworks in the course of this tutorial.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Go ahead and create a class in the Swift file.","type":"text"}]}],"type":"step","caption":[],"code":"02-create-class.swift","runtimePreview":null,"media":null},{"code":"03-add-setup-method.swift","caption":[{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We use a static variable to store a single instance of your model in our app. Instantiating a Core ML model is pretty resource intensive, so we want to instantiate the class once and only once."}]}],"style":"note"}],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will start by loading and setting up the model in code."},{"type":"text","text":" "},{"type":"text","text":"Add a static constant "},{"code":"model","type":"codeVoice"},{"text":" and function ","type":"text"},{"type":"codeVoice","code":"setupModel"},{"type":"text","text":" to the class. We are going to setup the model in the next steps."}]}],"type":"step","runtimePreview":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"First, we have to create a ","type":"text"},{"code":"MLModelConfiguration","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is used to define settings for the way in which a model is executed."},{"type":"text","text":" "},{"text":"You can for example specify that the model should use all compute units, CPU and Neural Engine or CPU only.","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","code":"04-chapter2.swift"},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We use the "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" syntax to get an "},{"type":"codeVoice","code":"Optional<SqueezeNet>"},{"text":" back.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The variable "},{"code":"modelWrapper","type":"codeVoice"},{"type":"text","text":" is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if the provided configuration is invalid or the model could not be found in the bundle."}]}],"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, create an instance of the model wrapper class (e.g. of the class "},{"code":"SqueezeNet","type":"codeVoice"},{"type":"text","text":" when using the SqueezeNet model)."},{"type":"text","text":" "},{"text":"This class is autogenerated by Xcode after adding a ","type":"text"},{"type":"codeVoice","code":".mlmodel"},{"type":"text","text":" and we are going to look at the content soon."}]}],"code":"05-chapter2.swift"},{"code":null,"runtimePreview":null,"caption":[{"style":"warning","type":"aside","name":"Warning","content":[{"inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"As we don’t do any runtime changes to the model or load the model from the network, we do not need to use proper error handling here."},{"type":"text","text":" "},{"text":"If instantiating the model wrapper fails, we will notice during development and get a ","type":"text"},{"type":"codeVoice","code":"fatalError"},{"type":"text","text":" – so the App crashes."}],"type":"paragraph"}]}],"type":"step","content":[],"media":null},{"code":null,"media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/bundle","isActive":true,"type":"reference"},{"text":" is a class from the Foundation Framework. It is a class representing your application executable during runtime.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"During compilation of your app, a bundle is being composed. The main application bundle can be accessed using "},{"code":"Bundle.main","type":"codeVoice"},{"type":"text","text":"."}]}],"caption":[{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"As a rule of thumb you can say, that all resources go into your application bundle. For example images, sound files and localization string files can be accessed via the bundle. In our case all relevant model data (our ","type":"text"},{"type":"codeVoice","code":".mlmodel"},{"type":"text","text":" file) is being copied to the application bundle."}]}]}]},{"content":[{"inlineContent":[{"type":"text","text":"As you might know, Apple’s Platforms support a few different Machine Learning tasks like"},{"text":" ","type":"text"},{"type":"text","text":"Image, Text, Sound, and Activity Classification"},{"text":" ","type":"text"},{"type":"text","text":"just to name a few."}],"type":"paragraph"}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"You might have recognized that all of the given examples have different types of input data. Image Classification needs an image input, Text Classification needs a text, Sound Classification needs a sound and Activity Classification needs raw movement data in a specific format.","type":"text"}]}],"type":"step","code":null,"runtimePreview":null},{"type":"step","code":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You might have wondered what the auto-generated model wrapper does and why it exists. So let’s take a quick view at the auto-generated code."},{"type":"text","text":" "},{"type":"text","text":"You can do that by opening your "},{"type":"codeVoice","code":"SqueezeNet.mlmodel"},{"type":"text","text":" in the Project Navigator and clicking on the label "},{"code":"SqueezeNet","type":"codeVoice"},{"type":"text","text":" right next to the "},{"type":"codeVoice","code":"Model Class"},{"text":" label.","type":"text"}]},{"name":"Warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Make sure that you compiled your app as the code of the class is generated during compilation. You may have to comment out the existing code in order to compile successfully.","type":"text"}]}],"style":"warning"}],"media":"02-02-click-model-class.png","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Everything we did by now, is loading and instantiating our model wrapper from the "},{"code":"Bundle","type":"codeVoice"},{"type":"text","text":"."}]}]},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You will be greeted by a wall of text. But no worries, we just need to take a quick look at it, as the "},{"code":"Vision","type":"codeVoice"},{"type":"text","text":" framework will do the heavy lifting for us."}]}],"media":null,"code":null,"runtimePreview":null},{"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"This file should contain three classes."},{"text":" ","type":"text"},{"type":"text","text":"Depending on the name of your model it has a class for input, output and for loading and prediction."}],"type":"paragraph"}],"media":null,"code":"01-SqueezeNet.swift","caption":[]},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because working with them is not that straight forward, we get a few so called "},{"type":"codeVoice","code":"convenience"},{"type":"text","text":" initializer by default. As the name implies a "},{"code":"convenience init","type":"codeVoice"},{"text":" should simplify instantiating an object of this class.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example we get options to create a model input from "},{"code":"UIImage","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"URL","type":"codeVoice"},{"text":".","type":"text"}]}],"media":null,"runtimePreview":null,"code":"SqueezeNet-02.swift","content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"SqueezeNetInput","type":"codeVoice"},{"type":"text","text":" class has an important variable "},{"type":"codeVoice","code":"image"},{"text":" which is the input for the model.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CVPixelBuffer"},{"type":"text","text":" is a very low-level class from "},{"type":"codeVoice","code":"CoreVideo"},{"type":"text","text":" and stores images in a buffer."}],"type":"paragraph"}],"type":"step"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"The output class provides a dictionary which maps class labels to their calculated likelihood."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"code":"SqueezeNet-03.swift","caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SqueezeNet"},{"text":" class has exactly the initializer, which we used in the ","type":"text"},{"code":"ImageClassifier","type":"codeVoice"},{"type":"text","text":" class."},{"type":"text","text":" "},{"text":"It also has methods to predict an output from a given output.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"You may have noticed that the input of the model takes only input buffers of size 227x227 pixels.","type":"text"}]}],"code":"SqueezeNet-04.swift","type":"step","runtimePreview":null},{"caption":[],"type":"step","code":null,"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"But how do we convert our images to the required format?"},{"text":" ","type":"text"},{"type":"text","text":"Thats where the Vision Framework comes into play."},{"text":" ","type":"text"},{"type":"text","text":"The Vision Framework provides features to execute common computer vision problems like text recognition on still images and videos."},{"type":"text","text":" "},{"text":"It also simplifies dealing with Core ML models so we are going to setup a ","type":"text"},{"type":"codeVoice","code":"VNCoreMLModel"},{"type":"text","text":" next."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Go ahead and create a ","type":"text"},{"type":"codeVoice","code":"VNCoreMLModel"},{"text":" from the underlying ","type":"text"},{"type":"codeVoice","code":"MLModel"},{"text":" of the ","type":"text"},{"type":"codeVoice","code":"SqueezeNet"},{"text":" wrapper instance.","type":"text"}]}],"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"06-chapter2.swift"},{"caption":[],"type":"step","content":[{"inlineContent":[{"text":"We now have successfully setup our model and will look at how to use this ","type":"text"},{"code":"VNCoreMLModel","type":"codeVoice"},{"text":" in the next section.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null,"code":null}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"In this section we are going to load and instantiate the model.","type":"text"}],"type":"paragraph"}]}],"anchor":"Setup-the-model"},{"title":"Implement the classification","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Setup the additional models we need for the "},{"code":"ImageClassifier","type":"codeVoice"},{"type":"text","text":"."}]}],"mediaPosition":"trailing"}],"anchor":"Implement-the-classification","stepsSection":[{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create a new Swift file "},{"code":"ImageClassificationPredication.swift","type":"codeVoice"},{"text":" and add a struct.","type":"text"},{"type":"text","text":" "},{"text":"This will store a single result of your classification operation. E.g. label of “elephant” and confidence ","type":"text"},{"code":"0.94","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"Section2-01.swift","runtimePreview":null},{"code":"07-chapter2.swift","type":"step","media":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"A typealias works like a shorthand. Everywhere you write ","type":"text"},{"code":"ImageClassificationHandler","type":"codeVoice"},{"type":"text","text":", it is the same like replacing it with the right side."}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Add a typealias ","type":"text"},{"type":"codeVoice","code":"ImageClassificationHandler"},{"type":"text","text":" to the top of the file "},{"code":"ImageClassifier.swift","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This type will be used as a shorthand for the result closure. It returns an array of "},{"type":"codeVoice","code":"ImageClassificationPredication"},{"text":" and does not exect any return types.","type":"text"}]}]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"VNRequest","type":"codeVoice"},{"type":"text","text":" is used to execute an image classification operation."},{"type":"text","text":" "},{"type":"text","text":"Each request get’s an image input and has a handler which is called with the image classification predictions calculated with the model."}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"A handler is a closure being passed from the caller to react to the results.","type":"text"}]}],"type":"step","code":null,"runtimePreview":null},{"caption":[],"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"We store a reference of each request feed into the ","type":"text"},{"type":"codeVoice","code":"ImageClassifier"},{"text":" along with the provided handler.","type":"text"}],"type":"paragraph"}],"type":"step","code":"08-chapter2.swift"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file and add an extension to the "},{"type":"codeVoice","code":"CGImagePropertyOrientation"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"When feeding an image into the Vision framework we need to provide the image orientiation as a ","type":"text"},{"code":"CoreGraphics","type":"codeVoice"},{"type":"text","text":" image orientation."}]}],"type":"step","media":null,"code":"CGImagePropertyOrientation+Extensions.swift","caption":[{"inlineContent":[{"text":"We create an initializer which maps the orientation of a ","type":"text"},{"code":"UIImage","type":"codeVoice"},{"type":"text","text":" (which we can easily handle) to a "},{"code":"CGImagePropertyOrientation","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Next, create an image classification request. We are going to implement the function ","type":"text"},{"code":"createImageClassificationRequest()","type":"codeVoice"},{"type":"text","text":" in a further step."}]}],"code":"09-chapter2.swift","runtimePreview":null,"media":null,"type":"step","content":[{"inlineContent":[{"text":"Add a ","type":"text"},{"code":"makePredictions","type":"codeVoice"},{"type":"text","text":" function."},{"text":" ","type":"text"},{"text":"First, obtain the ","type":"text"},{"type":"codeVoice","code":"CGImagePropertyOrientation"},{"text":" and the ","type":"text"},{"type":"codeVoice","code":"CGImage"},{"type":"text","text":" from the provided "},{"type":"codeVoice","code":"UIImage"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Store the request in the "},{"code":"predictionHandlers","type":"codeVoice"},{"text":" array with the request as the key and the completion handler passed to the function as the value. This is going to be called when the following request handler finished the classification job.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"text":"So create the ","type":"text"},{"type":"codeVoice","code":"VNImageRequestHandler"},{"type":"text","text":" with a given image and the previously obtained orientation. After that, call the throwing function "},{"code":"perform","type":"codeVoice"},{"text":" on the handler which takes an array of ","type":"text"},{"code":"VNRequest","type":"codeVoice"},{"type":"text","text":" as parameters."}]}],"type":"step","media":null,"code":"10-chapter2.swift","runtimePreview":null},{"code":"11-chapter2.swift","caption":[{"inlineContent":[{"type":"text","text":"Add this method to create a new "},{"code":"VNCoreMLRequest","type":"codeVoice"},{"type":"text","text":". It uses the staticly available model which we setup earlier. We use a image crop and scale options of "},{"type":"codeVoice","code":".centerCrop"},{"type":"text","text":" – there may be cases where you want a different behaviour, but for our use case this is good."}],"type":"paragraph"},{"style":"warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Again, you see a warning that "},{"type":"codeVoice","code":"visionRequestHandler"},{"text":" is not available. We will implement this in the next step.","type":"text"}]}],"name":"Warning"}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can see, that there is an error "},{"code":"Cannot find 'createImageClassificationRequest' in scope","type":"codeVoice"},{"type":"text","text":". We are going to fix that now."}]}],"media":null,"runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"As the final step, we implement the "},{"type":"codeVoice","code":"visionRequestHandler"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This will be the function which get’s called every time a ","type":"text"},{"code":"VNCoreMLRequest","type":"codeVoice"},{"type":"text","text":" succeeds or fails and handles calling the right completion functions."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Based on the request which get’s completed, we get the handler function from the "},{"type":"codeVoice","code":"predictionHandlers"},{"text":" dictionary. Next, we need an optional predictions array in which we will store the results produced by the model.","type":"text"}]}],"media":null,"code":"12-chapter2.swift","runtimePreview":null,"type":"step"},{"code":"13-chapter2.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Next, we use a defer callback to call the retrieved predicition handler with the obtained results.","type":"text"}]}],"caption":[{"inlineContent":[{"text":"We also check if the request failed with an error or has no results.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null},{"code":"14-chapter2.swift","type":"step","media":null,"runtimePreview":null,"caption":[{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Image classifiers only produce classification observations. However, other Core ML model types can produce other observations. For example, a style transfer model produces "},{"type":"codeVoice","code":"VNPixelBufferObservation"},{"text":" instances.","type":"text"}]}],"style":"note"}],"content":[{"type":"paragraph","inlineContent":[{"text":"We now cast the request’s results as an ","type":"text"},{"code":"VNClassificationObservation","type":"codeVoice"},{"type":"text","text":" array."}]}]}]},{"stepsSection":[{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"We setup a ","type":"text"},{"type":"codeVoice","code":"VNCoreMLModel"},{"type":"text","text":" with our image classifier model "},{"code":"SqueezeNet","type":"codeVoice"},{"text":".","type":"text"}]}],"code":null,"media":null,"type":"step","runtimePreview":null},{"runtimePreview":null,"media":null,"type":"step","caption":[],"content":[{"inlineContent":[{"text":"We as a developer can now create an instance of the ","type":"text"},{"code":"ImageClassifier","type":"codeVoice"},{"type":"text","text":" class and call "},{"type":"codeVoice","code":"makePredictions"},{"type":"text","text":" with an image."},{"text":" ","type":"text"},{"text":"The results are available in the trailing closure.","type":"text"}],"type":"paragraph"}],"code":"01-Example.swift"}],"title":"How to use the image classifier","anchor":"How-to-use-the-image-classifier","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Let’s look at what we build. You may struggle to understand how data flows here, so we will do a short recap.","type":"text"}],"type":"paragraph"}]}]}],"kind":"tasks"}],"metadata":{"categoryPathComponent":"Tutorial-Table-of-Contents","role":"project","category":"ML Lab","title":"Setup and implement the model"},"references":{"doc://com.lambdadigamma.mllab/tutorials/Tutorial-Table-of-Contents":{"kind":"overview","abstract":[{"type":"text","text":"Add and implement an image classifier Core ML model into your application."}],"title":"Implementing an image classifier with Core ML","url":"\/tutorials\/tutorial-table-of-contents","role":"overview","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents","type":"topic"},"SqueezeNet-03.swift":{"syntax":"swift","highlights":[{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}],"fileName":"SqueezeNet.swift","fileType":"swift","identifier":"SqueezeNet-03.swift","type":"file","content":["import CoreML","","","\/\/\/ Model Prediction Input Type","class SqueezeNetInput : MLFeatureProvider {","    ","    \/\/\/ Input image to be classified as color (kCVPixelFormatType_32BGRA) image buffer, 227 pixels wide by 227 pixels high","    var image: CVPixelBuffer","    ","    \/\/ ...","    ","    init(image: CVPixelBuffer) {","        self.image = image","    }","    ","    convenience init(imageWith image: CGImage) throws {","        \/\/ ...","    }","    ","    convenience init(imageAt image: URL) throws {","        \/\/ ...","    }","    ","    func setImage(with image: CGImage) throws {","        \/\/ ...","    }","    ","    func setImage(with image: URL) throws {","        \/\/ ...","    }","    ","}","","\/\/\/ Model Prediction Output Type","class SqueezeNetOutput : MLFeatureProvider {","    ","    \/\/\/ Source provided by CoreML","    private let provider : MLFeatureProvider","    ","    \/\/\/ Probability of each category as dictionary of strings to doubles","    var classLabelProbs: [String : Double] {","        return self.provider.featureValue(for: \"classLabelProbs\")!.dictionaryValue as! [String : Double]","    }","    ","    \/\/ ...","    ","}","","\/\/\/ Class for model loading and prediction","class SqueezeNet {","    ","    \/\/ ...","    ","}"]},"02-create-class.swift":{"syntax":"swift","highlights":[{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"02-create-class.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","class ImageClassifier {","    ","    ","    ","}"]},"doc://com.lambdadigamma.mllab/tutorials/Tutorial-Table-of-Contents/Add-the-model-to-your-project":{"identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents\/Add-the-model-to-your-project","abstract":[],"kind":"article","type":"topic","role":"article","url":"\/tutorials\/tutorial-table-of-contents\/add-the-model-to-your-project","title":"Add the model to your project"},"11-chapter2.swift":{"syntax":"swift","highlights":[{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"11-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","typealias ImageClassificationHandler = (_ predictions: [ImageClassificationPredication]?) -> Void","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {}","    ","    \/\/ MARK: - Request Handling -","    ","    private var predictionHandlers = [VNRequest: ImageClassificationHandler]()","    ","    func makePredictions(","        for photo: UIImage,","        completionHandler: @escaping ImageClassificationHandler","    ) throws {","        ","        let orientation = CGImagePropertyOrientation(photo.imageOrientation)","        ","        guard let photoImage = photo.cgImage else {","            fatalError(\"Photo doesn't have underlying CGImage.\")","        }","        ","        let imageClassificationRequest = createImageClassificationRequest()","        ","        predictionHandlers[imageClassificationRequest] = completionHandler","        ","        let handler = VNImageRequestHandler(","            cgImage: photoImage,","            orientation: orientation","        )","        ","        try handler.perform([imageClassificationRequest])","        ","    }","    ","    private func createImageClassificationRequest() -> VNCoreMLRequest {","        ","        let imageClassificationRequest = VNCoreMLRequest(","            model: Self.model,","            completionHandler: visionRequestHandler","        )","        ","        imageClassificationRequest.imageCropAndScaleOption = .centerCrop","        ","        return imageClassificationRequest","    }","    ","}"]},"03-add-setup-method.swift":{"syntax":"swift","highlights":[{"line":7},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"03-add-setup-method.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {","        ","        \/\/ todo: implement this","        ","    }","    ","}"]},"doc://com.lambdadigamma.mllab/tutorials/ML-Lab/01-Setup-the-project#Exploring-the-model-in-Xcode":{"identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project#Exploring-the-model-in-Xcode","abstract":[{"type":"text","text":"Learn how to add an Core ML file to your app and explore the built-in capabilities of Xcode."}],"kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/ml-lab\/01-setup-the-project#Exploring-the-model-in-Xcode","title":"Exploring the model in Xcode"},"doc://com.lambdadigamma.mllab/tutorials/ML-Lab/01-Setup-the-project#Summary":{"url":"\/tutorials\/ml-lab\/01-setup-the-project#Summary","type":"section","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project#Summary","role":"pseudoSymbol","title":"Summary","abstract":[{"type":"text","text":"Learn how to add an Core ML file to your app and explore the built-in capabilities of Xcode."}],"kind":"section"},"13-chapter2.swift":{"syntax":"swift","highlights":[{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"13-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","typealias ImageClassificationHandler = (_ predictions: [ImageClassificationPredication]?) -> Void","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {}","    ","    \/\/ MARK: - Request Handling -","    ","    private var predictionHandlers = [VNRequest: ImageClassificationHandler]()","    ","    func makePredictions(","        for photo: UIImage,","        completionHandler: @escaping ImageClassificationHandler","    ) throws {","        ","        let orientation = CGImagePropertyOrientation(photo.imageOrientation)","        ","        guard let photoImage = photo.cgImage else {","            fatalError(\"Photo doesn't have underlying CGImage.\")","        }","        ","        let imageClassificationRequest = createImageClassificationRequest()","        ","        predictionHandlers[imageClassificationRequest] = completionHandler","        ","        let handler = VNImageRequestHandler(","            cgImage: photoImage,","            orientation: orientation","        )","        ","        try handler.perform([imageClassificationRequest])","        ","    }","    ","    private func createImageClassificationRequest() -> VNCoreMLRequest {","        ","        let imageClassificationRequest = VNCoreMLRequest(","            model: Self.model,","            completionHandler: visionRequestHandler","        )","        ","        imageClassificationRequest.imageCropAndScaleOption = .centerCrop","        ","        return imageClassificationRequest","    }","    ","    private func visionRequestHandler(_ request: VNRequest, error: Error?) {","        ","        guard let predictionHandler = predictionHandlers.removeValue(","            forKey: request","        ) else {","            fatalError(\"Every request must have a prediction handler.\")","        }","        ","        var predictions: [ImageClassificationPredication]? = nil","        ","        \/\/ Call the client's completion handler after the method returns.","        defer {","            \/\/ Send the predictions back to the client.","            predictionHandler(predictions)","        }","        ","        if let error = error {","            print(\"Vision image classification error: \\(error.localizedDescription)\")","            return","        }","        ","        if request.results == nil {","            print(\"Vision request had no results.\")","            return","        }","        ","        \/\/ ...","        ","    }","    ","}"]},"01-import-frameworks.swift":{"syntax":"swift","highlights":[],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"01-import-frameworks.swift","type":"file","content":["import UIKit","import Vision","import CoreML"]},"12-chapter2.swift":{"syntax":"swift","highlights":[{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"12-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","typealias ImageClassificationHandler = (_ predictions: [ImageClassificationPredication]?) -> Void","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {}","    ","    \/\/ MARK: - Request Handling -","    ","    private var predictionHandlers = [VNRequest: ImageClassificationHandler]()","    ","    func makePredictions(","        for photo: UIImage,","        completionHandler: @escaping ImageClassificationHandler","    ) throws {","        ","        let orientation = CGImagePropertyOrientation(photo.imageOrientation)","        ","        guard let photoImage = photo.cgImage else {","            fatalError(\"Photo doesn't have underlying CGImage.\")","        }","        ","        let imageClassificationRequest = createImageClassificationRequest()","        ","        predictionHandlers[imageClassificationRequest] = completionHandler","        ","        let handler = VNImageRequestHandler(","            cgImage: photoImage,","            orientation: orientation","        )","        ","        try handler.perform([imageClassificationRequest])","        ","    }","    ","    private func createImageClassificationRequest() -> VNCoreMLRequest {","        ","        let imageClassificationRequest = VNCoreMLRequest(","            model: Self.model,","            completionHandler: visionRequestHandler","        )","        ","        imageClassificationRequest.imageCropAndScaleOption = .centerCrop","        ","        return imageClassificationRequest","    }","    ","    private func visionRequestHandler(_ request: VNRequest, error: Error?) {","        ","        guard let predictionHandler = predictionHandlers.removeValue(","            forKey: request","        ) else {","            fatalError(\"Every request must have a prediction handler.\")","        }","        ","        var predictions: [ImageClassificationPredication]? = nil","        ","        \/\/ ...","        ","    }","    ","}"]},"04-chapter2.swift":{"syntax":"swift","highlights":[{"line":11},{"line":12}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"04-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {","        ","        let config = MLModelConfiguration()","        config.computeUnits = MLComputeUnits.cpuAndGPU","        ","    }","    ","}"]},"06-chapter2.swift":{"syntax":"swift","highlights":[],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"06-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {","        ","        let config = MLModelConfiguration()","        config.computeUnits = MLComputeUnits.cpuAndGPU","        ","        let squeezeNet = try? SqueezeNet(","            configuration: config","        )","        ","        guard let squeezeNet = squeezeNet else {","            fatalError(\"App failed to create a model instance.\")","        }","        ","        let underlyingModel = squeezeNet.model","        ","        guard let visionModel = try? VNCoreMLModel(","            for: underlyingModel","        ) else {","            fatalError(\"App failed to create a `VNCoreMLModel` instance.\")","        }","        ","        return visionModel","        ","    }","    ","}"]},"02-01-create-class.png":{"type":"image","identifier":"02-01-create-class.png","variants":[{"url":"\/images\/02-01-create-class.png","traits":["1x","light"]}],"alt":""},"07-chapter2.swift":{"syntax":"swift","highlights":[],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"07-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","typealias ImageClassificationHandler = (_ predictions: [ImageClassificationPredication]?) -> Void","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {","        ","        let config = MLModelConfiguration()","        config.computeUnits = MLComputeUnits.cpuAndGPU","        ","        let squeezeNet = try? SqueezeNet(","            configuration: config","        )","        ","        guard let squeezeNet = squeezeNet else {","            fatalError(\"App failed to create a model instance.\")","        }","        ","        let underlyingModel = squeezeNet.model","        ","        guard let visionModel = try? VNCoreMLModel(","            for: underlyingModel","        ) else {","            fatalError(\"App failed to create a `VNCoreMLModel` instance.\")","        }","        ","        return visionModel","        ","    }","    ","}"]},"SqueezeNet-02.swift":{"syntax":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}],"fileName":"SqueezeNet.swift","fileType":"swift","identifier":"SqueezeNet-02.swift","type":"file","content":["import CoreML","","","\/\/\/ Model Prediction Input Type","class SqueezeNetInput : MLFeatureProvider {","    ","    \/\/\/ Input image to be classified as color (kCVPixelFormatType_32BGRA) image buffer, 227 pixels wide by 227 pixels high","    var image: CVPixelBuffer","    ","    \/\/ ...","    ","    init(image: CVPixelBuffer) {","        self.image = image","    }","    ","    convenience init(imageWith image: CGImage) throws {","        \/\/ ...","    }","    ","    convenience init(imageAt image: URL) throws {","        \/\/ ...","    }","    ","    func setImage(with image: CGImage) throws {","        \/\/ ...","    }","    ","    func setImage(with image: URL) throws {","        \/\/ ...","    }","    ","}","","\/\/\/ Model Prediction Output Type","class SqueezeNetOutput : MLFeatureProvider {","    ","    \/\/ ...","    ","}","","\/\/\/ Class for model loading and prediction","class SqueezeNet {","    ","    \/\/ ...","    ","}"]},"Section2-01.swift":{"syntax":"swift","highlights":[],"fileName":"ImageClassificationPredication.swift","fileType":"swift","identifier":"Section2-01.swift","type":"file","content":["import Foundation","import Vision","","struct ImageClassificationPredication {","    ","    let label: String","    ","    let confidence: VNConfidence","    ","}"]},"14-chapter2.swift":{"syntax":"swift","highlights":[{"line":79},{"line":80},{"line":81},{"line":82},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"14-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","typealias ImageClassificationHandler = (_ predictions: [ImageClassificationPredication]?) -> Void","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {}","    ","    \/\/ MARK: - Request Handling -","    ","    private var predictionHandlers = [VNRequest: ImageClassificationHandler]()","    ","    func makePredictions(","        for photo: UIImage,","        completionHandler: @escaping ImageClassificationHandler","    ) throws {","        ","        let orientation = CGImagePropertyOrientation(photo.imageOrientation)","        ","        guard let photoImage = photo.cgImage else {","            fatalError(\"Photo doesn't have underlying CGImage.\")","        }","        ","        let imageClassificationRequest = createImageClassificationRequest()","        ","        predictionHandlers[imageClassificationRequest] = completionHandler","        ","        let handler = VNImageRequestHandler(","            cgImage: photoImage,","            orientation: orientation","        )","        ","        try handler.perform([imageClassificationRequest])","        ","    }","    ","    private func createImageClassificationRequest() -> VNCoreMLRequest {","        ","        let imageClassificationRequest = VNCoreMLRequest(","            model: Self.model,","            completionHandler: visionRequestHandler","        )","        ","        imageClassificationRequest.imageCropAndScaleOption = .centerCrop","        ","        return imageClassificationRequest","    }","    ","    private func visionRequestHandler(_ request: VNRequest, error: Error?) {","        ","        guard let predictionHandler = predictionHandlers.removeValue(","            forKey: request","        ) else {","            fatalError(\"Every request must have a prediction handler.\")","        }","        ","        var predictions: [ImageClassificationPredication]? = nil","        ","        \/\/ Call the client's completion handler after the method returns.","        defer {","            \/\/ Send the predictions back to the client.","            predictionHandler(predictions)","        }","        ","        if let error = error {","            print(\"Vision image classification error: \\(error.localizedDescription)\")","            return","        }","        ","        if request.results == nil {","            print(\"Vision request had no results.\")","            return","        }","        ","        guard let observations = request.results as? [VNClassificationObservation] else {","            print(\"VNRequest produced the wrong result type: \\(type(of: request.results)).\")","            return","        }","        ","        predictions = observations.map { observation in","            ImageClassificationPredication(","                label: observation.identifier,","                confidence: observation.confidence","            )","        }","        ","    }","    ","}"]},"doc://com.lambdadigamma.mllab/tutorials/Tutorial-Table-of-Contents/Setup-and-implement-the-classifier":{"identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents\/Setup-and-implement-the-classifier","abstract":[],"kind":"article","type":"topic","role":"article","url":"\/tutorials\/tutorial-table-of-contents\/setup-and-implement-the-classifier","title":"Setup and implement the classifier"},"doc://com.lambdadigamma.mllab/tutorials/ML-Lab/02-setup-implement-model":{"estimatedTime":"30min","kind":"project","abstract":[],"title":"Setup and implement the model","url":"\/tutorials\/ml-lab\/02-setup-implement-model","role":"project","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/02-setup-implement-model","type":"topic"},"05-chapter2.swift":{"syntax":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"05-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {","        ","        let config = MLModelConfiguration()","        config.computeUnits = MLComputeUnits.cpuAndGPU","        ","        let squeezeNet = try? SqueezeNet(","            configuration: config","        )","        ","        guard let squeezeNet = squeezeNet else {","            fatalError(\"App failed to create a model instance.\")","        }","        ","    }","    ","}"]},"SqueezeNet-04.swift":{"syntax":"swift","highlights":[{"line":52},{"line":53},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75}],"fileName":"SqueezeNet.swift","fileType":"swift","identifier":"SqueezeNet-04.swift","type":"file","content":["import CoreML","","","\/\/\/ Model Prediction Input Type","class SqueezeNetInput : MLFeatureProvider {","    ","    \/\/\/ Input image to be classified as color (kCVPixelFormatType_32BGRA) image buffer, 227 pixels wide by 227 pixels high","    var image: CVPixelBuffer","    ","    \/\/ ...","    ","    init(image: CVPixelBuffer) {","        self.image = image","    }","    ","    convenience init(imageWith image: CGImage) throws {","        \/\/ ...","    }","    ","    convenience init(imageAt image: URL) throws {","        \/\/ ...","    }","    ","    func setImage(with image: CGImage) throws {","        \/\/ ...","    }","    ","    func setImage(with image: URL) throws {","        \/\/ ...","    }","    ","}","","\/\/\/ Model Prediction Output Type","class SqueezeNetOutput : MLFeatureProvider {","    ","    \/\/\/ Source provided by CoreML","    private let provider : MLFeatureProvider","    ","    \/\/\/ Probability of each category as dictionary of strings to doubles","    var classLabelProbs: [String : Double] {","        return self.provider.featureValue(for: \"classLabelProbs\")!.dictionaryValue as! [String : Double]","    }","    ","    \/\/ ...","    ","}","","\/\/\/ Class for model loading and prediction","class SqueezeNet {","    ","    let model: MLModel","    ","    \/\/ ...","    ","    \/\/\/ Construct a model with configuration","    convenience init(configuration: MLModelConfiguration) throws {","        try self.init(contentsOf: type(of:self).urlOfModelInThisBundle, configuration: configuration)","    }","    ","    \/\/ ...","    ","    \/\/\/ Make a prediction using the structured interface","    func prediction(input: SqueezeNetInput) throws -> SqueezeNetOutput {","        return try self.prediction(input: input, options: MLPredictionOptions())","    }","    ","    \/\/\/ Make a prediction using the structured interface","    func prediction(input: SqueezeNetInput, options: MLPredictionOptions) throws -> SqueezeNetOutput {","        let outFeatures = try model.prediction(from: input, options:options)","        return SqueezeNetOutput(features: outFeatures)","    }","    ","    \/\/ ...","    ","}"]},"doc://com.lambdadigamma.mllab/tutorials/ML-Lab/02-setup-implement-model#Implement-the-classification":{"url":"\/tutorials\/ml-lab\/02-setup-implement-model#Implement-the-classification","type":"section","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/02-setup-implement-model#Implement-the-classification","abstract":[],"title":"Implement the classification","kind":"section","role":"pseudoSymbol"},"10-chapter2.swift":{"syntax":"swift","highlights":[{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"10-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","typealias ImageClassificationHandler = (_ predictions: [ImageClassificationPredication]?) -> Void","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {}","    ","    \/\/ MARK: - Request Handling -","    ","    private var predictionHandlers = [VNRequest: ImageClassificationHandler]()","    ","    func makePredictions(","        for photo: UIImage,","        completionHandler: @escaping ImageClassificationHandler","    ) throws {","        ","        let orientation = CGImagePropertyOrientation(photo.imageOrientation)","        ","        guard let photoImage = photo.cgImage else {","            fatalError(\"Photo doesn't have underlying CGImage.\")","        }","        ","        let imageClassificationRequest = createImageClassificationRequest()","        ","        predictionHandlers[imageClassificationRequest] = completionHandler","        ","        let handler = VNImageRequestHandler(","            cgImage: photoImage,","            orientation: orientation","        )","        ","        try handler.perform([imageClassificationRequest])","        ","    }","    ","}"]},"02-02-click-model-class.png":{"identifier":"02-02-click-model-class.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/02-02-click-model-class.png"}],"alt":""},"09-chapter2.swift":{"syntax":"swift","highlights":[],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"09-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","typealias ImageClassificationHandler = (_ predictions: [ImageClassificationPredication]?) -> Void","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {}","    ","    \/\/ MARK: - Request Handling -","    ","    private var predictionHandlers = [VNRequest: ImageClassificationHandler]()","    ","    func makePredictions(","        for photo: UIImage,","        completionHandler: @escaping ImageClassificationHandler","    ) throws {","        ","        let orientation = CGImagePropertyOrientation(photo.imageOrientation)","        ","        guard let photoImage = photo.cgImage else {","            fatalError(\"Photo doesn't have underlying CGImage.\")","        }","        ","        let imageClassificationRequest = createImageClassificationRequest()","        ","    }","    ","}"]},"08-chapter2.swift":{"syntax":"swift","highlights":[{"line":11},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"fileName":"ImageClassifier.swift","fileType":"swift","identifier":"08-chapter2.swift","type":"file","content":["import UIKit","import Vision","import CoreML","","typealias ImageClassificationHandler = (_ predictions: [ImageClassificationPredication]?) -> Void","","class ImageClassifier {","    ","    static let model = setupModel()","    ","    static func setupModel() -> VNCoreMLModel {}","    ","    \/\/ MARK: - Request Handling -","    ","    private var predictionHandlers = [VNRequest: ImageClassificationHandler]()","    ","    ","}"]},"doc://com.lambdadigamma.mllab/tutorials/ML-Lab/01-Setup-the-project#Getting-a-model":{"kind":"section","abstract":[{"type":"text","text":"Learn how to add an Core ML file to your app and explore the built-in capabilities of Xcode."}],"title":"Getting a model","url":"\/tutorials\/ml-lab\/01-setup-the-project#Getting-a-model","role":"pseudoSymbol","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project#Getting-a-model","type":"section"},"doc://com.lambdadigamma.mllab/tutorials/ML-Lab/02-setup-implement-model#How-to-use-the-image-classifier":{"url":"\/tutorials\/ml-lab\/02-setup-implement-model#How-to-use-the-image-classifier","type":"section","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/02-setup-implement-model#How-to-use-the-image-classifier","abstract":[],"title":"How to use the image classifier","kind":"section","role":"pseudoSymbol"},"doc://com.lambdadigamma.mllab/tutorials/ML-Lab/01-Setup-the-project":{"estimatedTime":"10min","kind":"project","abstract":[{"type":"text","text":"Learn how to add an Core ML file to your app and explore the built-in capabilities of Xcode."}],"title":"Add the model to your project","url":"\/tutorials\/ml-lab\/01-setup-the-project","role":"project","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project","type":"topic"},"01-SqueezeNet.swift":{"syntax":"swift","highlights":[],"fileName":"SqueezeNet.swift","fileType":"swift","identifier":"01-SqueezeNet.swift","type":"file","content":["import CoreML","","","\/\/\/ Model Prediction Input Type","class SqueezeNetInput : MLFeatureProvider {","    ","    \/\/ ...","    ","}","","\/\/\/ Model Prediction Output Type","class SqueezeNetOutput : MLFeatureProvider {","    ","    \/\/ ...","    ","}","","\/\/\/ Class for model loading and prediction","class SqueezeNet {","    ","    \/\/ ...","    ","}"]},"https://developer.apple.com/documentation/foundation/bundle":{"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/bundle","type":"link","title":"Bundle","titleInlineContent":[{"text":"Bundle","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/foundation\/bundle"},"doc://com.lambdadigamma.mllab/tutorials/Tutorial-Table-of-Contents/Add-the-next-chapter-title-here.":{"url":"\/tutorials\/tutorial-table-of-contents\/add-the-next-chapter-title-here.","type":"topic","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/Tutorial-Table-of-Contents\/Add-the-next-chapter-title-here.","role":"article","title":"Add the next chapter title here.","abstract":[],"kind":"article"},"doc://com.lambdadigamma.mllab/tutorials/ML-Lab/01-Setup-the-project#Adding-your-model-to-Xcode":{"url":"\/tutorials\/ml-lab\/01-setup-the-project#Adding-your-model-to-Xcode","type":"section","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/01-Setup-the-project#Adding-your-model-to-Xcode","abstract":[{"text":"Learn how to add an Core ML file to your app and explore the built-in capabilities of Xcode.","type":"text"}],"title":"Adding your model to Xcode","kind":"section","role":"pseudoSymbol"},"doc://com.lambdadigamma.mllab/tutorials/ML-Lab/02-setup-implement-model#Setup-the-model":{"kind":"section","abstract":[],"title":"Setup the model","url":"\/tutorials\/ml-lab\/02-setup-implement-model#Setup-the-model","role":"pseudoSymbol","identifier":"doc:\/\/com.lambdadigamma.mllab\/tutorials\/ML-Lab\/02-setup-implement-model#Setup-the-model","type":"section"},"01-Example.swift":{"syntax":"swift","highlights":[],"fileName":"Example.swift","fileType":"swift","identifier":"01-Example.swift","type":"file","content":["let imageClassifier = ImageClassifier()","","\/\/ Load an image from Asset Catalogue","let image = UIImage(named: \"example\")!","","do {","    ","    \/\/ Make a prediction and print the results.","    try imageClassifier.makePredictions(","        for: image","    ) { predictions in","        ","        if let predictions {","            ","            for prediction in predictions {","                print(\"\\(prediction.label): \\(prediction.confidence)\")","            }","            ","        } else {","            print(\"No result from image classifier.\")","        }","        ","    }","    ","} catch {","    print(\"Vision was unable to make a prediction...\\n\\n\\(error.localizedDescription)\")","}"]},"CGImagePropertyOrientation+Extensions.swift":{"syntax":"swift","highlights":[],"fileName":"CGImagePropertyOrientation+Extensions.swift","fileType":"swift","identifier":"CGImagePropertyOrientation+Extensions.swift","type":"file","content":["import UIKit","import ImageIO","","extension CGImagePropertyOrientation {","    ","    init(_ orientation: UIImage.Orientation) {","        switch orientation {","            case .up: self = .up","            case .down: self = .down","            case .left: self = .left","            case .right: self = .right","            case .upMirrored: self = .upMirrored","            case .downMirrored: self = .downMirrored","            case .leftMirrored: self = .leftMirrored","            case .rightMirrored: self = .rightMirrored","            @unknown default: self = .up","        }","    }","    ","}"]}}}